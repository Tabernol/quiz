package repo.impl;

import connection.MyDataSource;
import exeptions.DataBaseException;
import lombok.extern.slf4j.Slf4j;
import models.Image;
import repo.ImageRepo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Class repository has relationship with table Image in MySQL
 *
 * @author MaxKrasnopolskyi
 */
@Slf4j
public class ImageRepoImpl implements ImageRepo {
    /**
     * method create add new image in database
     *
     * @param publicId was generated by cloudinary
     * @param url is url of image
     * @param width is width of image
     * @param height is height of image
     * @return 1 if image has added will be deleted
     * @throws DataBaseException is wrapper of SQLException
     */
    @Override
    public int addImage(String publicId, String url, Integer width, Integer height) throws DataBaseException {
        String sql = "INSERT INTO image values(default, ?, ?, ?, ?)";
        try (Connection con = MyDataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {
            pst.setString(1, publicId);
            pst.setString(2, url);
            pst.setInt(3, width);
            pst.setInt(4, height);
            return pst.executeUpdate();
        } catch (SQLException e) {
            log.warn("Can not add image");
            throw new DataBaseException("Can not add image" + e.getMessage(), e);
        }
    }

    /**
     * return list of all images
     * @return list of all images
     * @throws DataBaseException is wrapper of SQLException
     */
    @Override
    public List<Image> getAll() throws DataBaseException {
        String sql = "select * from image";
        try (Connection con = MyDataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {
            ResultSet resultSet = pst.executeQuery();
            List<Image> imageList = new ArrayList<>();
            while (resultSet.next()) {
                Image image = new Image();
                image.setId(resultSet.getLong("image_id"));
                image.setPublicId(resultSet.getString("public_id"));
                image.setUrl(resultSet.getString("url"));
                image.setWidth(resultSet.getInt("width"));
                image.setHeight(resultSet.getInt("height"));
                imageList.add(image);
            }
            resultSet.close();
            return imageList;
        } catch (SQLException e) {
            log.warn("Can not get order Image list");
            throw new DataBaseException("Can not get order Image list" + e.getMessage(), e);
        }
    }

    /**
     * Delete image from database
     * @param publicId was generated by cloudinary
     * @return
     * @throws DataBaseException
     */
    @Override
    public int deleteImage(String publicId) throws DataBaseException {
        String sql = "delete from image where public_id like ?";
        try (Connection con = MyDataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {
            pst.setString(1, publicId);
            return pst.executeUpdate();
        } catch (SQLException e) {
            log.warn("Can't delete Image ");
            throw new DataBaseException("Can't delete Image " + e.getMessage(), e);
        }
    }

    /**
     * method returns list where this publicId uses
     * @param publicId was generated by cloudinary
     * @return list names of tests
     */
    @Override
    public List<String> canDeleteImage(String publicId){
        List<String> testName = new ArrayList<>();
        String sql = "select name from question" +
                " inner join test on test.id = question.test_id \n" +
                " inner join image on question.url = image.url\n" +
                " where public_id like ?";
        try (Connection con = MyDataSource.getConnection();
        PreparedStatement pst = con.prepareStatement(sql)){
            pst.setString(1, publicId);
            ResultSet resultSet = pst.executeQuery();
            while (resultSet.next()){
                String name = resultSet.getString("name");
                testName.add(name);
            }
            return testName;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
