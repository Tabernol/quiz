package repo.impl;

import connection.MyDataSource;
import exeptions.DataBaseException;
import lombok.extern.slf4j.Slf4j;
import models.Image;
import repo.ImageRepo;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Class repository has relationship with table Image in MySQL
 *
 * @author MaxKrasnopolskyi
 */
@Slf4j
public class ImageRepoImpl implements ImageRepo {

    private static final String INSERT_IMAGE = "INSERT INTO image values(default, ?, ?, ?, ?)";

    private static final String GET_ALL = "select * from image";

    private static final String DELETE_IMAGE = "delete from image where public_id like ?";

    private static final String CAN_DELETE_THIS_IMAGE = "select name from question" +
            " inner join test on test.id = question.test_id \n" +
            " inner join image on question.url = image.url\n" +
            " where public_id like ?";

    private final DataSource dataSource;

    public ImageRepoImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    /**
     * method create add new image in database
     *
     * @param image contains information about inserting image
     *              publicId was generated by cloudinary
     *              url is url of image
     *              width is width of image
     *              height is height of image
     * @return 1 if image has added will be deleted
     * @throws DataBaseException is wrapper of SQLException
     */
    @Override
    public int addImage(Image image) throws DataBaseException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(INSERT_IMAGE)) {
            pst.setString(1, image.getPublicId());
            pst.setString(2, image.getUrl());
            pst.setInt(3, image.getWidth());
            pst.setInt(4, image.getHeight());
            return pst.executeUpdate();
        } catch (SQLException e) {
            log.warn("Can not add image");
            throw new DataBaseException("Can not add image" + e.getMessage(), e);
        }
    }

    /**
     * return list of all images
     *
     * @return list of all images
     * @throws DataBaseException is wrapper of SQLException
     */
    @Override
    public List<Image> getAll() throws DataBaseException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(GET_ALL)) {
            ResultSet resultSet = pst.executeQuery();
            List<Image> imageList = new ArrayList<>();
            while (resultSet.next()) {
                Image image = new Image();
                image.setId(resultSet.getLong("image_id"));
                image.setPublicId(resultSet.getString("public_id"));
                image.setUrl(resultSet.getString("url"));
                image.setWidth(resultSet.getInt("width"));
                image.setHeight(resultSet.getInt("height"));
                imageList.add(image);
            }
            resultSet.close();
            return imageList;
        } catch (SQLException e) {
            log.warn("Can not get order Image list");
            throw new DataBaseException("Can not get order Image list" + e.getMessage(), e);
        }
    }

    /**
     * Delete image from database
     *
     * @param publicId was generated by cloudinary
     * @return 1 if image was deleted
     * @throws DataBaseException is wrapper of SQLException
     */
    @Override
    public int deleteImage(String publicId) throws DataBaseException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(DELETE_IMAGE)) {
            pst.setString(1, publicId);
            return pst.executeUpdate();
        } catch (SQLException e) {
            log.warn("Can't delete Image ");
            throw new DataBaseException("Can't delete Image " + e.getMessage(), e);
        }
    }

    /**
     * method returns list where this publicId uses
     *
     * @param publicId was generated by cloudinary
     * @return list names of tests
     */
    @Override
    public List<String> canDeleteImage(String publicId) {
        List<String> testName = new ArrayList<>();
        try (Connection con = dataSource.getConnection();
             PreparedStatement pst = con.prepareStatement(CAN_DELETE_THIS_IMAGE)) {
            pst.setString(1, publicId);
            ResultSet resultSet = pst.executeQuery();
            while (resultSet.next()) {
                String name = resultSet.getString("name");
                testName.add(name);
            }
            return testName;
        } catch (SQLException e) {
            return new ArrayList<>();
        }
    }
}
